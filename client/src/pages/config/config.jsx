import React, { useState } from "react";
import axios from "axios";
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import "./config.css";

const Config = () => {
  const [formData, setFormData] = useState({
    config_group: "",
    mixing_time: "",
    extruder_exit_time: "",
    pre_press_exit_time: "",
    primary_press_start: "",
    stream_in: "",
    primary_press_exit: "",
    secondary_press_1_start: "",
    temp_check_1: "",
    secondary_press_2_start: "",
    temp_check_2: "",
    cooling_time: "",
    secondary_press_exit: "",
    adj_next_start: "",
    solid_block: "",
    remove_workpiece: "",
  });

  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      await axios.post(`/api/post/config/add`, formData);
      toast.success("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
      setFormData({
        config_group: "",
        mixing_time: "",
        extruder_exit_time: "",
        pre_press_exit_time: "",
        primary_press_start: "",
        stream_in: "",
        primary_press_exit: "",
        secondary_press_1_start: "",
        temp_check_1: "",
        secondary_press_2_start: "",
        temp_check_2: "",
        cooling_time: "",
        secondary_press_exit: "",
        adj_next_start: "",
        solid_block: "",
        remove_workpiece: "",
      });
    } catch (error) {
      console.error("Error in adding config:", error);
      const errorMessage = error.response?.data?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤";
      toast.error(`‚ùå ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      config_group: "",
      mixing_time: "",
      extruder_exit_time: "",
      pre_press_exit_time: "",
      primary_press_start: "",
      stream_in: "",
      primary_press_exit: "",
      secondary_press_1_start: "",
      temp_check_1: "",
      secondary_press_2_start: "",
      temp_check_2: "",
      cooling_time: "",
      secondary_press_exit: "",
      adj_next_start: "",
      solid_block: "",
      remove_workpiece: "",
    });
    toast.info("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
  };

  const isFormValid = () => {
    return formData.config_group.trim() !== '' && 
           Object.entries(formData).some(([key, value]) => 
             key !== 'config_group' && value.trim() !== ''
           );
  };

  const formatLabel = (key) => {
    const labelMap = {
      config_group: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      mixing_time: "‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°",
      extruder_exit_time: "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Extruder",
      pre_press_exit_time: "‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Pre Press",
      primary_press_start: "‡πÄ‡∏£‡∏¥‡πà‡∏° Primary Press",
      stream_in: "Stream In",
      primary_press_exit: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Primary Press",
      secondary_press_1_start: "‡πÄ‡∏£‡∏¥‡πà‡∏° Secondary Press 1",
      temp_check_1: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 1",
      secondary_press_2_start: "‡πÄ‡∏£‡∏¥‡πà‡∏° Secondary Press 2",
      temp_check_2: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 2",
      cooling_time: "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô",
      secondary_press_exit: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Secondary Press",
      adj_next_start: "‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
      solid_block: "Solid Block",
      remove_workpiece: "‡πÄ‡∏≠‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å",
    };
    
    return labelMap[key] || key.replace(/_/g, " ").replace(/\b\w/g, (char) => char.toUpperCase());
  };

  const getInputType = (key) => {
    if (key === 'config_group') return 'text';
    return 'number';
  };

  const getPlaceholder = (key) => {
    if (key === 'config_group') return '‡πÄ‡∏ä‡πà‡∏ô Production-Group-A';
    return '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 5.5)';
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const fieldGroups = [
    {
      title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
      icon: "‚öôÔ∏è",
      color: "#004D8A",
      description: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
      fields: ["config_group"]
    },
    {
      title: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏π‡∏õ",
      icon: "üîÑ",
      color: "#FFCD00",
      description: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏π‡∏õ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
      fields: ["mixing_time", "extruder_exit_time", "pre_press_exit_time"]
    },
    {
      title: "Primary Press",
      icon: "üè≠",
      color: "#004D8A",
      description: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏Ç‡πâ‡∏≤",
      fields: ["primary_press_start", "stream_in", "primary_press_exit"]
    },
    {
      title: "Secondary Press",
      icon: "üîß",
      color: "#FFCD00",
      description: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏î‡∏£‡∏≠‡∏ö‡∏™‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥",
      fields: ["secondary_press_1_start", "temp_check_1", "secondary_press_2_start", "temp_check_2", "secondary_press_exit"]
    },
    {
      title: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢",
      icon: "‚úÖ",
      color: "#10b981",
      description: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£",
      fields: ["cooling_time", "adj_next_start", "solid_block", "remove_workpiece"]
    }
  ];
 
  return (
    <div className="config-container">
      <ToastContainer 
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      
      <div className="header-section">
        <div className="header-content">
          <div className="header-icon">‚öôÔ∏è</div>
          <div className="header-text">
            <h1 className="config-title">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</h1>
            <p className="config-subtitle">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï PE Block ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</p>
          </div>
        </div>
        
        <div className="progress-indicator">
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: '20%' }}></div>
          </div>
          <p className="progress-text">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1/5</p>
        </div>
      </div>

      <form className="config-form" onSubmit={handleSubmit}>
        {/* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢ - Sections 1-3 */}
        <div className="form-left-column">
          {fieldGroups.slice(0, 3).map((group, groupIndex) => (
            <div key={groupIndex} className={`form-section ${group.fields.length > 3 ? 'large-section' : ''}`}>
              <div className="section-header">
                <div className="section-title-container">
                  <div 
                    className="icon-container" 
                    style={{ backgroundColor: group.color }}
                  >
                    {group.icon}
                  </div>
                  <div className="section-info">
                    <h3 className="section-title">{group.title}</h3>
                    <p className="section-description">{group.description}</p>
                  </div>
                </div>
                <div className="section-badge">
                  {group.fields.length} ‡∏ü‡∏¥‡∏•‡∏î‡πå
                </div>
              </div>
              
              <div className="form-grid">
                {group.fields.map((key) => (
                  <div key={key} className="form-group">
                    <label className="form-label" htmlFor={key}>
                      {formatLabel(key)}
                      {key !== 'config_group' && <span className="required">*</span>}
                      {key !== 'config_group' && <span className="unit-label">(‡∏ô‡∏≤‡∏ó‡∏µ)</span>}
                    </label>
                    <div className="input-container">
                      <input
                        className="form-input"
                        type={getInputType(key)}
                        id={key}
                        name={key}
                        value={formData[key]}
                        onChange={handleChange}
                        placeholder={getPlaceholder(key)}
                        required
                        min={key !== 'config_group' ? "0" : undefined}
                        step={key !== 'config_group' ? "0.01" : undefined}
                        maxLength={key === 'config_group' ? "50" : undefined}
                      />
                      {key !== 'config_group' && (
                        <span className="input-unit">‡∏ô‡∏≤‡∏ó‡∏µ</span>
                      )}
                    </div>
                    <div className="input-helper">
                      {key === 'config_group' 
                        ? '‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå' 
                        : '‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'
                      }
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

        {/* ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤ - Sections 4-5 */}
        <div className="form-right-column">
          {fieldGroups.slice(3, 5).map((group, groupIndex) => (
            <div key={groupIndex + 3} className={`form-section ${group.fields.length > 3 ? 'large-section' : ''}`}>
              <div className="section-header">
                <div className="section-title-container">
                  <div 
                    className="icon-container" 
                    style={{ backgroundColor: group.color }}
                  >
                    {group.icon}
                  </div>
                  <div className="section-info">
                    <h3 className="section-title">{group.title}</h3>
                    <p className="section-description">{group.description}</p>
                  </div>
                </div>
                <div className="section-badge">
                  {group.fields.length} ‡∏ü‡∏¥‡∏•‡∏î‡πå
                </div>
              </div>
              
              <div className="form-grid">
                {group.fields.map((key) => (
                  <div key={key} className="form-group">
                    <label className="form-label" htmlFor={key}>
                      {formatLabel(key)}
                      {key !== 'config_group' && <span className="required">*</span>}
                      {key !== 'config_group' && <span className="unit-label">(‡∏ô‡∏≤‡∏ó‡∏µ)</span>}
                    </label>
                    <div className="input-container">
                      <input
                        className="form-input"
                        type={getInputType(key)}
                        id={key}
                        name={key}
                        value={formData[key]}
                        onChange={handleChange}
                        placeholder={getPlaceholder(key)}
                        required
                        min={key !== 'config_group' ? "0" : undefined}
                        step={key !== 'config_group' ? "0.01" : undefined}
                        maxLength={key === 'config_group' ? "50" : undefined}
                      />
                      {key !== 'config_group' && (
                        <span className="input-unit">‡∏ô‡∏≤‡∏ó‡∏µ</span>
                      )}
                    </div>
                    <div className="input-helper">
                      {key === 'config_group' 
                        ? '‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå' 
                        : '‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'
                      }
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

        {/* Summary ‡πÅ‡∏•‡∏∞ Actions */}
        <div className="form-summary-actions">
          {/* Form Summary */}
          <div className="form-summary">
            <div className="summary-header">
              <h4>‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h4>
            </div>
            <div className="summary-content">
              <div className="summary-item">
                <span className="summary-label">‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:</span>
                <span className="summary-value">{formData.config_group || '-'}</span>
              </div>
              <div className="summary-item">
                <span className="summary-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å:</span>
                <span className="summary-value">
                  {Object.values(formData).filter(value => value.trim() !== '').length} / {Object.keys(formData).length}
                </span>
              </div>
              <div className="summary-item">
                <span className="summary-label">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                <span className={`summary-status ${isFormValid() ? 'valid' : 'invalid'}`}>
                  {isFormValid() ? '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : '‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}
                </span>
              </div>
            </div>
          </div>
          
          <div className="form-actions">
            <button 
              className="reset-button" 
              type="button" 
              onClick={resetForm}
              disabled={isLoading}
            >
              <span>üßπ</span>
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </button>
            
            <button 
              className="cancel-button" 
              type="button" 
              onClick={() => window.history.back()}
              disabled={isLoading}
            >
              <span>‚Ü©Ô∏è</span>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
            
            <button 
              className={`form-submit-button ${!isFormValid() ? 'disabled' : ''}`}
              type="submit"
              disabled={!isFormValid() || isLoading}
            >
              {isLoading ? (
                <>
                  <span className="loading-spinner"></span>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </>
              ) : (
                <>
                  <span>üíæ</span>
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                </>
              )}
            </button>
          </div>
        </div>
      </form>
    </div>
  );
};

export default Config;
