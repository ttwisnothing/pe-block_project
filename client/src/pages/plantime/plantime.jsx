import React, { useState, useEffect } from "react";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./plantime.css";

const Plantime = () => {
  const [productName, setProductName] = useState("");
  const [fristStart, setFristStart] = useState("");
  const [runRound, setRunRound] = useState("");
  const [products, setProducts] = useState([]);
  const [colorName, setColorName] = useState("");
  const [machineNames, setMachineNames] = useState([""]);
  const [planTimes, setPlanTimes] = useState([]);
  const [loading, setLoading] = useState(false);
  const [calculated, setCalculated] = useState(false);

  const fetchProducts = async () => {
    try {
      const response = await axios.get(`/api/get/products`);
      setProducts(response.data.products || []);
    } catch (error) {
      console.error("‚ùå ERROR fetching Products:", error);
      toast.error("‚ùå Failed to fetch products");
    }
  };

  const calculatePlanTime = async () => {
    if (!productName || !fristStart || !runRound || !colorName || machineNames.length === 0) {
      toast.warn("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á");
      return;
    }

    const timeParts = fristStart.split(":");
    if (timeParts.length < 2 || timeParts.length > 3) {
      toast.warn("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:mm ‡∏´‡∏£‡∏∑‡∏≠ HH:mm:ss");
      return;
    }
    const formattedTime = `${timeParts[0].padStart(2, "0")}:${timeParts[1].padStart(2, "0")}:${timeParts[2] || "00"}`;

    setLoading(true);
    try {
      const payload = {
        fristStart: formattedTime,
        runRound: parseInt(runRound, 10),
        mcNames: machineNames.filter((name) => name !== ""),
        color_name: colorName,
      };
      const response = await axios.post(
        `/api/post/plantime/add/${productName}`,
        payload
      );
      toast.success(response.data.message || "‚úÖ Plan Time calculated successfully");
      setPlanTimes(response.data.planTimeList || []);
      setCalculated(true);
    } catch (error) {
      console.error("‚ùå ERROR calculating Plan Time:", error);
      toast.error(error.response?.data?.message || "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì");
      setPlanTimes([]);
      setCalculated(false);
    } finally {
      setLoading(false);
    }
  };

  const handleMachineNameChange = (index, value) => {
    const updateNames = [...machineNames];
    updateNames[index] = value;
    setMachineNames(updateNames);
  };

  const addMachineField = () => {
    setMachineNames([...machineNames, ""]);
  };

  const removeMachineField = (index) => {
    if (machineNames.length > 1) {
      const updatedNames = machineNames.filter((_, i) => i !== index);
      setMachineNames(updatedNames);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  return (
    <div className="plantime-container">
      <ToastContainer position="top-right" />
      
      <div className="header-section">
        <h1 className="plantime-title">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï</h1>
        <p className="plantime-subtitle">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
      </div>

      <form className="plantime-form">
        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô) */}
        <div className="form-combined-section">
          <div className="form-section product-info">
            <h3 className="section-title">
              <div className="icon-container">üì¶</div>
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå
            </h3>
            <div className="form-grid-2">
              <div className="form-group">
                <label className="form-label">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå *</label>
                <select
                  className="form-select"
                  value={productName}
                  onChange={(e) => setProductName(e.target.value)}
                  required
                >
                  <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå --</option>
                  {products.map((product, index) => (
                    <option key={product.id || index} value={product.name}>
                      {product.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏µ *</label>
                <input
                  className="form-input"
                  type="text"
                  value={colorName}
                  onChange={(e) => setColorName(e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏µ"
                  required
                />
              </div>
            </div>
          </div>

          <div className="form-section production-settings">
            <h3 className="section-title">
              <div className="icon-container">‚è∞</div>
              ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
            </h3>
            <div className="form-grid-2">
              <div className="form-group">
                <label className="form-label">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô *</label>
                <input
                  className="form-input"
                  type="text"
                  value={fristStart}
                  onChange={(e) => setFristStart(e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° HH:mm"
                  required
                />
              </div>

              <div className="form-group">
                <label className="form-label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö *</label>
                <input
                  className="form-input"
                  type="number"
                  value={runRound}
                  onChange={(e) => setRunRound(e.target.value)}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö"
                  min="1"
                  required
                />
              </div>
            </div>
          </div>
        </div>

        {/* ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ */}
        <div className="form-section">
          <div className="section-header">
            <h3 className="section-title">
              <div className="icon-container">üè≠</div>
              ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            </h3>
            <button
              className="add-machine-button"
              type="button"
              onClick={addMachineField}
            >
              <span>+</span>
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
            </button>
          </div>
          
          <div className="machines-grid-horizontal">
            {machineNames.map((name, index) => (
              <div key={index} className="machine-item">
                <div className="form-group">
                  <label className="form-label">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ {index + 1}</label>
                  <div className="machine-input-wrapper">
                    <input
                      className="form-input"
                      type="text"
                      value={name}
                      onChange={(e) => handleMachineNameChange(index, e.target.value)}
                      placeholder={`‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ ${index + 1}`}
                      required
                    />
                    {machineNames.length > 1 && (
                      <button
                        type="button"
                        className="remove-machine-button"
                        onClick={() => removeMachineField(index)}
                      >
                        √ó
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ */}
        <div className="form-actions">
          <button 
            className="cancel-button" 
            type="button" 
            onClick={() => window.history.back()}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          
          <button
            className="calculate-button"
            type="button"
            onClick={calculatePlanTime}
            disabled={loading}
          >
            {loading ? (
              <>
                <span className="loading-spinner"></span>
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì...
              </>
            ) : (
              <>
                <span>üîÑ</span>
                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default Plantime;
