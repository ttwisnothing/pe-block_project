import React, { useEffect, useRef, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { Button, IconButton } from "@mui/material";
import axios from "axios";
import "./plantimetable.css";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "../../components/table/table.jsx";
import CustomTable from "../../components/table/table"; 
import DigitalClock from "../../components/clock/digitalClock.jsx";
import Swal from "sweetalert2";
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import CloseIcon from '@mui/icons-material/Close';
import BuildIcon from '@mui/icons-material/Build';
import PrintIcon from '@mui/icons-material/Print';

let alertAudio = null;

const playAlertSound = (alertDuration) => {
  alertAudio = new Audio("/sounds/warning-beeping.mp3");
  alertAudio.play();

  setTimeout(() => {
    if (alertAudio) {
      alertAudio.pause();
      alertAudio.currentTime = 0;
    }
  }, alertDuration);
}

const PlanTimeTable = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const intervalRef = useRef(null);
  const [productName, setProductName] = useState("");
  const [colorName, setColorName] = useState("");
  const [planTimes, setPlanTimes] = useState([]);
  const [currentRow, setCurrentRow] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° effect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    let savedData = location.state;
    if (!savedData) {
      const fromStorage = localStorage.getItem("planTimeData");
      if (fromStorage) {
        savedData = JSON.parse(fromStorage);
      }
    }

    if (!savedData || !savedData.planTimes || savedData.planTimes.length === 0) {
      toast.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plan Time ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà");
      navigate("/plantime");
      return;
    }

    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° run_no ‡πÅ‡∏•‡∏∞ batch_no
    const sortedPlanTimes = [...savedData.planTimes].sort((a, b) => {
      if (a.run_no !== b.run_no) {
        return a.run_no - b.run_no;
      }
      return a.batch_no - b.batch_no;
    });

    setProductName(savedData.productName);
    setColorName(savedData.colorName);
    setPlanTimes(sortedPlanTimes);

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    const NOTICATION_INTERVAL = 60000; // 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    const NOTIFY_BEFORE_MS = 5 * 60 * 1000; // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    const NOTIFY_WITHIN_MS = 10 * 60 * 1000; // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    const EXACT_MATCH_THRESHOLD_MS = 60 * 1000; // ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ

    const alertNotification = () => {
      const currentTime = new Date();
      let closestRow = null;
      let closestDiff = Infinity;

      savedData.planTimes.forEach((row) => {
        Object.entries(row).forEach(([key, timeValue]) => {
          // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ß‡∏•‡∏≤
          if (!timeValue || typeof timeValue !== "string" || 
              !timeValue.includes(":") || 
              ['run_no', 'batch_no', 'id', 'product_id'].includes(key)) return;

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ Date
          const [hours, minutes, seconds] = timeValue.split(":");
          const eventTime = new Date(currentTime);
          eventTime.setHours(+hours, +minutes, +(seconds || 0), 0);

          const diff = eventTime - currentTime;

          // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
          if (Math.abs(diff) < closestDiff) {
            closestDiff = Math.abs(diff);
            closestRow = {...row, closestField: key};
          }

          // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ
          if (diff >= 0 && diff >= NOTIFY_BEFORE_MS && diff <= NOTIFY_WITHIN_MS) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ
            const minutesLeft = Math.floor(diff / 60000);
            
            toast.warn(
              `‚è∞ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô ${key.replace('_', ' ')} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${savedData.productName} ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ (${eventTime.toLocaleTimeString("th-TH", { hour12: false })})`
            );
          }

          // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏≠‡∏î‡∏µ
          if (Math.abs(diff) <= EXACT_MATCH_THRESHOLD_MS) {
            let timeInterval;
            const alertDuration = 10000; // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
            Swal.fire({
              title: "üö® ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£!",
              html: `<div class="alert-content">
                     <p><strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô:</strong> ${key.replace('_', ' ')}</p>
                     <p><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${eventTime.toLocaleTimeString("th-TH", { hour12: false })}</p>
                     <p><strong>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</strong> ${savedData.productName} (${savedData.colorName || '-'})</p>
                     </div>`,
              timer: alertDuration,
              timerProgressBar: true,
              showConfirmButton: true,
              confirmButtonText: '‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö',
              didOpen: () => {
                playAlertSound(alertDuration);
                Swal.showLoading();
                timeInterval = setInterval(() => {
                  const timer = Swal.getHtmlContainer().querySelector("b.timer-left");
                  if (timer) {
                    timer.textContent = Math.ceil(Swal.getTimerLeft() / 1000);
                  }
                }, 100);
              },
              willClose: () => {
                clearInterval(timeInterval);
              },
              didDestroy: () => {
                if (alertAudio) {
                  alertAudio.pause();
                  alertAudio.currentTime = 0;
                }
              }
            });
          }
        });
      });

      setCurrentRow(closestRow);
    };

    const setupAlertInterval = () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }

      // ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      const now = new Date();
      const delay = (60 - now.getSeconds()) * 1000 - now.getMilliseconds();

      const timeoutId = setTimeout(() => {
        alertNotification(); // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        intervalRef.current = setInterval(alertNotification, NOTICATION_INTERVAL);
      }, delay);

      return () => {
        clearTimeout(timeoutId);
        if (intervalRef.current) {
          clearInterval(intervalRef.current);
        }
      };
    };

    return setupAlertInterval();
  }, [navigate, location.state]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  const formatTime = (time) => {
    if (!time || typeof time !== "string" || !time.includes(":")) return "";
    const [hours, minutes] = time.split(":");
    return `${hours}:${minutes}`;
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
  const handleMachineBreakdown = async () => {
    setIsLoading(true);
    
    try {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
      const pendingToastId = toast.loading("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß...");

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      const response = await axios.post(`/api/post/plantime/temp/add/${productName}`);
      
      if (response.status !== 200) {
        throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏î‡πâ");
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó toast ‡πÄ‡∏õ‡πá‡∏ô success
      toast.update(pendingToastId, {
        render: response.data.message || "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        type: "success",
        isLoading: false,
        autoClose: 3000,
      });

      // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ edit-temp
      setTimeout(() => {
        navigate("/edit-temp", {
          state: { productName, colorName },
        });
      }, 3000);
    } catch (error) {
      toast.error(error.message || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏î‡πâ");
    } finally {
      setIsLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
  const handlePrint = () => {
    window.print();
  };

  return (
    <div className="table-container">
      <div className="table-header-section">
        <DigitalClock showDate={true} showSeconds={true} is24Hour={true} />
        
        <div className="top-buttons">
          <Button
            variant="contained"
            startIcon={<CloseIcon />}
            onClick={() => window.close()}
            className="close-button"
          >
            ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
          </Button>
          <Button
            variant="contained"
            color="secondary"
            startIcon={<PrintIcon />}
            onClick={handlePrint}
            className="print-button"
          >
            ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ú‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
          </Button>
        </div>
      </div>

      <div className="product-info-section">
        <div className="table-header">
          <h2>
            <span className="product-label">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</span> 
            <span className="product-name">{productName}</span>
            {colorName && (
              <span className="product-color">({colorName})</span>
            )}
          </h2>
        </div>

        {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î */}
        {currentRow && (
          <div className="current-step">
            <div className="current-step-label">‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</div>
            <div className="current-step-value">
              {currentRow.closestField && currentRow.closestField.replace('_', ' ')}
            </div>
          </div>
        )}
      </div>

      {/* ‡πÉ‡∏ä‡πâ CustomTable */}
      <div className="table-responsive">
        <CustomTable
          data={planTimes}
          formatTime={formatTime}
          currentRow={currentRow}
        />
      </div>

      <div className="footer-actions">
        <Button
          variant="contained"
          color="primary"
          startIcon={<BuildIcon />}
          onClick={handleMachineBreakdown}
          disabled={isLoading}
          className="machine-button"
        >
          {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£"}
        </Button>
      </div>
      
      <ToastContainer position="top-right" limit={3} />
    </div>
  );
};

export default PlanTimeTable;
